@using Microsoft.AspNetCore.Components
@using netRSS.Models
@using System.Data
@using Dapper
@using Microsoft.Data.Sqlite
@using System.IO
@using netRSS.Services
@inject IDbConnectionFactory DbConnectionFactory
@inject FeedValidationService FeedValidationService
@rendermode InteractiveServer

<div class="settings-feeds-container">
    <div class="settings-feeds-header">
        <h3>Feeds</h3>
        <button class="btn-add" @onclick="() => ShowAddEditModal(null)">
            <span class="btn-icon">+</span> Add Feed
        </button>
    </div>

    @if (IsLoading) {
        <div class="loading-indicator">Loading feeds...</div>
    } else if (Feeds.Count == 0) {
        <div class="empty-state">
            <p>No feeds found. Click the Add button to create your first feed.</p>
            @if (!string.IsNullOrEmpty(LoadError)) {
                <div class="error-message">@LoadError</div>
            }
        </div>
    } else {
        <div class="settings-table-container">
            <table class="settings-table">
                <thead>
                    <tr>
                        <th @onclick="@(() => SortBy("id"))" class="sortable">
                            ID
                            @if (SortColumn == "id") {
                                <span class="sort-indicator">@(SortAscending ? "↑" : "↓")</span>
                            }
                        </th>
                        <th @onclick="@(() => SortBy("name"))" class="sortable">
                            Name
                            @if (SortColumn == "name") {
                                <span class="sort-indicator">@(SortAscending ? "↑" : "↓")</span>
                            }
                        </th>
                        <th @onclick="@(() => SortBy("url"))" class="sortable">
                            URL
                            @if (SortColumn == "url") {
                                <span class="sort-indicator">@(SortAscending ? "↑" : "↓")</span>
                            }
                        </th>
                        <th @onclick="@(() => SortBy("category"))" class="sortable">
                            Category
                            @if (SortColumn == "category") {
                                <span class="sort-indicator">@(SortAscending ? "↑" : "↓")</span>
                            }
                        </th>
                        <th @onclick="@(() => SortBy("entries"))" class="sortable">
                            Entries
                            @if (SortColumn == "entries") {
                                <span class="sort-indicator">@(SortAscending ? "↑" : "↓")</span>
                            }
                        </th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var feed in Feeds) {
                        <tr>
                            <td>@feed.id</td>
                            <td>@feed.name</td>
                            <td class="url-cell">
                                <div class="url-wrapper" title="@feed.url">@feed.url</div>
                            </td>
                            <td>
                                @if (feed.Category != null) {
                                    <div class="category-badge" style="background-color: @feed.Category.color">
                                        @feed.Category.name
                                    </div>
                                } else {
                                    <div class="category-badge uncategorized">
                                        Uncategorized
                                    </div>
                                }
                            </td>
                            <td>@feed.TotalCount</td>
                            <td class="action-buttons">
                                <button class="btn-edit" @onclick="() => ShowAddEditModal(feed)">Edit</button>
                                <button class="btn-delete" @onclick="() => ConfirmDelete(feed)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    @if (ShowModal) {
        <div class="modal-backdrop" @onclick="CloseModal">
            <div class="modal-container" @onclick:stopPropagation="true">
                <div class="modal-header">
                    <h4>@(CurrentFeed == null ? "Add Feed" : "Edit Feed")</h4>
                    <button class="btn-close" @onclick="CloseModal">×</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="feedName">Name:</label>
                        <input type="text" id="feedName" class="form-input" @bind="FeedName" />
                        @if (!string.IsNullOrEmpty(NameError)) {
                            <div class="validation-error">@NameError</div>
                        }
                    </div>
                    <div class="form-group">
                        <label for="feedUrl">URL:</label>
                        <div class="url-input-group">
                            <input type="text" id="feedUrl" class="form-input" @bind="FeedUrl" />
                            <button class="btn-validate" @onclick="ValidateFeedUrl" disabled="@IsValidating">
                                @if (IsValidating) {
                                    <span>Validating...</span>
                                } else {
                                    <span>Validate</span>
                                }
                            </button>
                        </div>
                        @if (!string.IsNullOrEmpty(UrlError)) {
                            <div class="validation-error">@UrlError</div>
                        }
                        @if (ShowValidationWarning && !string.IsNullOrEmpty(ValidationMessage)) {
                            <div class="validation-warning">@ValidationMessage</div>
                        }
                    </div>
                    <div class="form-group">
                        <label for="feedCategory">Category:</label>
                        <select id="feedCategory" class="form-select" @bind="SelectedCategoryId">
                            <option value="0">Uncategorized</option>
                            @foreach (var category in Categories) {
                                <option value="@category.id">@category.name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn-cancel" @onclick="CloseModal">Cancel</button>
                    <button class="btn-save" @onclick="SaveFeed" disabled="@IsValidating">Save</button>
                </div>
            </div>
        </div>
    }

    @if (ShowDeleteConfirm) {
        <div class="modal-backdrop" @onclick="CloseDeleteConfirm">
            <div class="modal-container delete-confirm" @onclick:stopPropagation="true">
                <div class="modal-header">
                    <h4>Delete Feed</h4>
                    <button class="btn-close" @onclick="CloseDeleteConfirm">×</button>
                </div>
                <div class="modal-body">
                    @if (CurrentFeed?.TotalCount > 0) {
                        <div class="warning-message">
                            <p>Warning: This feed has @CurrentFeed?.TotalCount entries. Deleting this feed will also delete all its entries.</p>
                        </div>
                    }
                    <p>Are you sure you want to delete the feed "@CurrentFeed?.name"?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn-cancel" @onclick="CloseDeleteConfirm">Cancel</button>
                    <button class="btn-delete confirm" @onclick="DeleteFeed">Delete</button>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .sortable {
        cursor: pointer;
        user-select: none;
    }
    
    .sortable:hover {
        background-color: rgba(0, 0, 0, 0.05);
    }
    
    .sort-indicator {
        margin-left: 4px;
        font-size: 0.8em;
    }
</style>

@code {
    private List<Feed> Feeds { get; set; } = new();
    private List<Category> Categories { get; set; } = new();
    private bool IsLoading { get; set; } = true;
    private bool ShowModal { get; set; } = false;
    private bool ShowDeleteConfirm { get; set; } = false;
    private Feed? CurrentFeed { get; set; }
    private string FeedName { get; set; } = string.Empty;
    private string FeedUrl { get; set; } = string.Empty;
    private int SelectedCategoryId { get; set; }
    private string NameError { get; set; } = string.Empty;
    private string UrlError { get; set; } = string.Empty;
    private string LoadError { get; set; } = string.Empty;
    private bool IsValidating { get; set; } = false;
    private string ValidationMessage { get; set; } = string.Empty;
    private bool ShowValidationWarning { get; set; } = false;
    private string SortColumn { get; set; } = "name";
    private bool SortAscending { get; set; } = true;

    // DTO class to handle the query results
    private class FeedDTO
    {
        public int id { get; set; }
        public string name { get; set; } = string.Empty;
        public string url { get; set; } = string.Empty;
        public int category_id { get; set; }
        public string? category_name { get; set; }
        public string? category_color { get; set; }
        public int entry_count { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadSortingPreferences();
        await LoadFeedsAndCategories();
    }

    private async Task LoadSortingPreferences()
    {
        try
        {
            using var connection = DbConnectionFactory.CreateConnection();
            await connection.OpenAsync();
            
            // Check if settings table exists
            try
            {
                // Try to select from settings table - this will fail if it doesn't exist
                await connection.ExecuteScalarAsync<string>("SELECT key FROM settings LIMIT 1");
            }
            catch (Exception)
            {
                // If the query fails, the table doesn't exist, so create it
                await connection.ExecuteAsync(@"
                    CREATE TABLE IF NOT EXISTS settings (
                        key TEXT PRIMARY KEY,
                        value TEXT NOT NULL,
                        type TEXT DEFAULT 'string',
                        description TEXT
                    );
                ");
                Console.WriteLine("Created settings table");
            }
            
            // Check if feed_sort_column setting exists
            var sortColumnSetting = await connection.QueryFirstOrDefaultAsync<Setting>(
                "SELECT * FROM settings WHERE key = 'feed_sort_column'");
                
            if (sortColumnSetting != null)
            {
                SortColumn = sortColumnSetting.Value;
            }
            
            // Check if feed_sort_ascending setting exists
            var sortAscendingSetting = await connection.QueryFirstOrDefaultAsync<Setting>(
                "SELECT * FROM settings WHERE key = 'feed_sort_ascending'");
                
            if (sortAscendingSetting != null && bool.TryParse(sortAscendingSetting.Value, out bool ascending))
            {
                SortAscending = ascending;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading sorting preferences: {ex.Message}");
            // If there's an error, use defaults
            SortColumn = "name";
            SortAscending = true;
        }
    }

    private async Task SaveSortingPreferences()
    {
        try
        {
            using var connection = DbConnectionFactory.CreateConnection();
            await connection.OpenAsync();
            
            // Save sort column
            await connection.ExecuteAsync(@"
                INSERT OR REPLACE INTO settings (key, value, type, description)
                VALUES ('feed_sort_column', @Value, 'string', 'Column to sort feeds by')
            ", new { Value = SortColumn });
            
            // Save sort direction
            await connection.ExecuteAsync(@"
                INSERT OR REPLACE INTO settings (key, value, type, description)
                VALUES ('feed_sort_ascending', @Value, 'boolean', 'Whether to sort feeds in ascending order')
            ", new { Value = SortAscending.ToString() });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving sorting preferences: {ex.Message}");
        }
    }

    private async Task SortBy(string column)
    {
        if (SortColumn == column)
        {
            SortAscending = !SortAscending;
        }
        else
        {
            SortColumn = column;
            SortAscending = true;
        }
        
        // Save the sorting preferences
        await SaveSortingPreferences();
        
        // Reload the feeds with the new sorting
        await LoadFeedsAndCategories();
    }

    private async Task LoadFeedsAndCategories()
    {
        IsLoading = true;
        LoadError = string.Empty;
        Feeds.Clear();
        Categories.Clear();
        
        try
        {
            using var connection = DbConnectionFactory.CreateConnection();
            await connection.OpenAsync();
            
            Console.WriteLine("Database connection opened successfully");

            // Always read sorting preferences from the database
            var sortColumnSetting = await connection.QueryFirstOrDefaultAsync<Setting>(
                "SELECT * FROM settings WHERE key = 'feed_sort_column'");
                
            if (sortColumnSetting != null)
            {
                SortColumn = sortColumnSetting.Value;
            }
            
            var sortAscendingSetting = await connection.QueryFirstOrDefaultAsync<Setting>(
                "SELECT * FROM settings WHERE key = 'feed_sort_ascending'");
                
            if (sortAscendingSetting != null && bool.TryParse(sortAscendingSetting.Value, out bool ascending))
            {
                SortAscending = ascending;
            }

            // Check if Uncategorized category exists, create it if not
            string checkUncategorizedSql = "SELECT id FROM categories WHERE name = 'Uncategorized'";
            var uncategorizedId = await connection.QueryFirstOrDefaultAsync<int?>(checkUncategorizedSql);
            
            if (!uncategorizedId.HasValue)
            {
                string createUncategorizedSql = "INSERT INTO categories (name, color) VALUES ('Uncategorized', '#888888')";
                await connection.ExecuteAsync(createUncategorizedSql);
                uncategorizedId = await connection.QueryFirstOrDefaultAsync<int>("SELECT last_insert_rowid()");
                Console.WriteLine($"Created Uncategorized category with ID: {uncategorizedId}");
            }

            // Load categories first (for the dropdown)
            string sqlCategories = "SELECT * FROM categories ORDER BY name";
            Categories = (await connection.QueryAsync<Category>(sqlCategories)).ToList();
            Console.WriteLine($"Loaded {Categories.Count} categories");

            // Build the SQL query for feeds with proper sorting
            string orderByClause = BuildOrderByClause();
            string sqlFeeds = $@"
                SELECT f.*, 
                       c.name as category_name, 
                       c.color as category_color,
                       (SELECT COUNT(*) FROM entries WHERE feed_id = f.id) as entry_count
                FROM feeds f
                LEFT JOIN categories c ON f.category_id = c.id
                {orderByClause}";
                
            var feedDTOs = (await connection.QueryAsync<FeedDTO>(sqlFeeds)).ToList();
            Console.WriteLine($"Loaded {feedDTOs.Count} feeds with sorting: {orderByClause}");
            
            // Process the feeds
            foreach (var dto in feedDTOs)
            {
                var feed = new Feed
                {
                    id = dto.id,
                    name = dto.name,
                    url = dto.url,
                    category_id = dto.category_id,
                    TotalCount = dto.entry_count
                };
                
                if (dto.category_id > 0 && dto.category_name != null && dto.category_color != null)
                {
                    feed.Category = new Category 
                    { 
                        id = dto.category_id,
                        name = dto.category_name,
                        color = dto.category_color
                    };
                }
                else
                {
                    feed.Category = null;
                }
                
                Feeds.Add(feed);
            }
            
            // Set default category for new feeds
            if (Categories.Count > 0)
            {
                SelectedCategoryId = Categories.First().id;
            }
            
            IsLoading = false;
        }
        catch (Exception ex)
        {
            LoadError = $"Error loading feeds: {ex.Message}";
            Console.WriteLine($"ERROR: {ex.Message}\n{ex.StackTrace}");
        }
        
        StateHasChanged();
    }
    
    private string BuildOrderByClause()
    {
        string direction = SortAscending ? "ASC" : "DESC";
        
        return SortColumn switch
        {
            "id" => $"ORDER BY f.id {direction}",
            "name" => $"ORDER BY f.name {direction}",
            "url" => $"ORDER BY f.url {direction}",
            "category" => $"ORDER BY COALESCE(c.name, 'Uncategorized') {direction}",
            "entries" => $"ORDER BY entry_count {direction}",
            _ => $"ORDER BY f.name {direction}"
        };
    }

    private void ShowAddEditModal(Feed? feed)
    {
        CurrentFeed = feed;
        
        if (feed != null)
        {
            // Edit mode
            FeedName = feed.name;
            FeedUrl = feed.url;
            SelectedCategoryId = feed.category_id;
        }
        else
        {
            // Add mode
            FeedName = string.Empty;
            FeedUrl = string.Empty;
            // Default to first category if available, otherwise Uncategorized
            SelectedCategoryId = Categories.Count > 0 ? Categories.First().id : 0;
        }
        
        NameError = string.Empty;
        UrlError = string.Empty;
        ShowModal = true;
    }

    private void CloseModal()
    {
        ShowModal = false;
        CurrentFeed = null;
    }

    private void ConfirmDelete(Feed feed)
    {
        CurrentFeed = feed;
        ShowDeleteConfirm = true;
    }

    private void CloseDeleteConfirm()
    {
        ShowDeleteConfirm = false;
        CurrentFeed = null;
    }

    private async Task SaveFeed()
    {
        // Reset errors
        NameError = string.Empty;
        UrlError = string.Empty;
        ValidationMessage = string.Empty;
        ShowValidationWarning = false;
        
        // Validate inputs
        if (string.IsNullOrWhiteSpace(FeedName))
        {
            NameError = "Feed name is required";
            return;
        }
        
        if (string.IsNullOrWhiteSpace(FeedUrl))
        {
            UrlError = "Feed URL is required";
            return;
        }

        // Validate URL format
        try
        {
            var uri = new Uri(FeedUrl);
        }
        catch
        {
            UrlError = "Invalid URL format";
            return;
        }
        
        // Validate feed before saving
        IsValidating = true;
        ValidationMessage = "Validating feed URL...";
        ShowValidationWarning = true;
        StateHasChanged();
        
        var (isValid, errorMessage) = await FeedValidationService.ValidateFeed(FeedUrl);
        
        IsValidating = false;
        
        if (!isValid)
        {
            UrlError = $"Invalid feed URL: {errorMessage}";
            ValidationMessage = errorMessage;
            ShowValidationWarning = true;
            StateHasChanged();
            return;
        }
        
        // If valid (even with warnings), proceed to save
        try
        {
            using var connection = DbConnectionFactory.CreateConnection();
            await connection.OpenAsync();
            
            // If Uncategorized is selected (0), find or create the Uncategorized category
            int categoryId = SelectedCategoryId;
            if (categoryId == 0)
            {
                string checkUncategorizedSql = "SELECT id FROM categories WHERE name = 'Uncategorized'";
                var uncategorizedId = await connection.QueryFirstOrDefaultAsync<int?>(checkUncategorizedSql);
                
                if (!uncategorizedId.HasValue)
                {
                    string createUncategorizedSql = "INSERT INTO categories (name, color) VALUES ('Uncategorized', '#888888')";
                    await connection.ExecuteAsync(createUncategorizedSql);
                    categoryId = await connection.QueryFirstOrDefaultAsync<int>("SELECT last_insert_rowid()");
                    Console.WriteLine($"Created Uncategorized category with ID: {categoryId}");
                }
                else
                {
                    categoryId = uncategorizedId.Value;
                }
            }
            
            if (CurrentFeed == null)
            {
                // Add new feed
                string sql = "INSERT INTO feeds (name, url, category_id) VALUES (@Name, @Url, @CategoryId)";
                await connection.ExecuteAsync(sql, new { Name = FeedName, Url = FeedUrl, CategoryId = categoryId });
                
                // Get the newly created feed ID
                int newFeedId = await connection.QuerySingleAsync<int>("SELECT last_insert_rowid()");
                
                // Update feed status
                await FeedValidationService.UpdateFeedStatus(newFeedId, FeedUrl, FeedName);
            }
            else
            {
                // Update existing feed
                string sql = "UPDATE feeds SET name = @Name, url = @Url, category_id = @CategoryId WHERE id = @Id";
                await connection.ExecuteAsync(sql, new { Id = CurrentFeed.id, Name = FeedName, Url = FeedUrl, CategoryId = categoryId });
                
                // Update feed status
                await FeedValidationService.UpdateFeedStatus(CurrentFeed.id, FeedUrl, FeedName);
            }
            
            // Refresh the list
            await LoadFeedsAndCategories();
            CloseModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving feed: {ex.Message}");
        }
    }

    private async Task DeleteFeed()
    {
        if (CurrentFeed == null) return;
        
        try
        {
            string dbPath = Path.Combine(Directory.GetCurrentDirectory(), "Data", "rss.db");
            string connectionString = $"Data Source={dbPath}";
            using (var connection = new SqliteConnection(connectionString))
            {
                await connection.OpenAsync();
                
                // First delete all entries associated with this feed
                string deleteEntriesSql = "DELETE FROM entries WHERE feed_id = @FeedId";
                await connection.ExecuteAsync(deleteEntriesSql, new { FeedId = CurrentFeed.id });
                
                // Then delete the feed
                string deleteFeedSql = "DELETE FROM feeds WHERE id = @Id";
                await connection.ExecuteAsync(deleteFeedSql, new { Id = CurrentFeed.id });
            }
            
            // Simply reload the feeds with current sorting preferences
            await LoadFeedsAndCategories();
            
            CloseDeleteConfirm();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting feed: {ex.Message}");
        }
    }

    private async Task ValidateFeedUrl()
    {
        if (string.IsNullOrWhiteSpace(FeedUrl))
        {
            UrlError = "Feed URL is required";
            return;
        }
        
        // Validate URL format
        try
        {
            var uri = new Uri(FeedUrl);
        }
        catch
        {
            UrlError = "Invalid URL format";
            return;
        }
        
        try
        {
            IsValidating = true;
            ValidationMessage = "Validating feed URL...";
            ShowValidationWarning = true;
            StateHasChanged();
            
            var (isValid, errorMessage) = await FeedValidationService.ValidateFeed(FeedUrl);
            
            if (isValid)
            {
                UrlError = string.Empty;
                ValidationMessage = string.IsNullOrEmpty(errorMessage) 
                    ? "Feed URL is valid! ✓" 
                    : $"Feed URL is valid, but with a warning: {errorMessage}";
                ShowValidationWarning = !string.IsNullOrEmpty(errorMessage);
            }
            else
            {
                UrlError = $"Invalid feed URL: {errorMessage}";
                ValidationMessage = errorMessage;
                ShowValidationWarning = true;
            }
        }
        catch (Exception ex)
        {
            UrlError = $"Error validating feed: {ex.Message}";
            ValidationMessage = ex.Message;
            ShowValidationWarning = true;
        }
        finally
        {
            IsValidating = false;
            StateHasChanged();
        }
    }
} 