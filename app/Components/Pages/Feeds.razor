@page "/feeds"
@using Microsoft.AspNetCore.Components
@using netRSS.Components.Layout
@using netRSS.Models
@rendermode InteractiveServer

<PageTitle>Feeds</PageTitle>

<div class="feeds-page-layout">
    <FeedSidebar @ref="sidebarComponent" OnCategorySelected="@HandleCategorySelected" OnFeedSelected="@HandleFeedSelected" OnViewUnread="@HandleViewUnread" OnViewStarred="@HandleViewStarred" OnEntryFiltered="@HandleEntryFiltered" />
    <FeedContent @ref="contentComponent" OnEntryFiltered="@HandleEntryFiltered" />
</div>

@code {
    private FeedSidebar? sidebarComponent;
    private FeedContent? contentComponent;
    
    private void HandleCategorySelected(Category category)
    {
        Console.WriteLine($"Feeds.razor: Category selected: {category.name}");
        if (contentComponent != null)
        {
            contentComponent.FilterByCategory(category);
        }
    }
    
    private void HandleFeedSelected(Feed feed)
    {
        Console.WriteLine($"Feeds.razor: Feed selected: {feed.name}");
        if (contentComponent != null)
        {
            contentComponent.FilterByFeed(feed);
        }
    }

    private void HandleViewUnread(bool showUnreadOnly)
    {
        Console.WriteLine($"Feeds.razor: View Unread toggled: {showUnreadOnly}");
        if (contentComponent != null)
        {
            contentComponent.SetUnreadFilter(showUnreadOnly);
        }
    }

    private void HandleViewStarred(bool showStarredOnly)
    {
        Console.WriteLine($"Feeds.razor: View Starred toggled: {showStarredOnly}");
        if (contentComponent != null)
        {
            contentComponent.SetStarredFilter(showStarredOnly);
        }
    }
    
    private void HandleEntryFiltered(Entry entry)
    {
        Console.WriteLine($"Feeds.razor: Entry filtered: {entry.id}");
        if (sidebarComponent != null)
        {
            sidebarComponent.UpdateCountsForFilteredEntry(entry);
        }
    }
} 