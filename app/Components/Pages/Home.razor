@page "/"
@using System.IO
@using System.Text.RegularExpressions
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>netRSS</PageTitle>

<div class="home-container">
    <h1>Welcome to netRSS</h1>
    
    <div class="tabs-container">
        <div class="tabs-header">
            <button class="tab-button @GetActiveClass("changelog")" @onclick="@(() => SetActiveTab("changelog"))">
                Change Log
            </button>
            <button class="tab-button @GetActiveClass("highlights")" @onclick="@(() => SetActiveTab("highlights"))">
                Highlights
            </button>
        </div>
        
        <div class="tab-content">
            @if (activeTab == "changelog")
            {
                <div class="changelog-container">
                    @if (!string.IsNullOrEmpty(changelogContent))
                    {
                        <div class="markdown-content">
                            @((MarkupString)changelogHtml)
                        </div>
                    }
                    else
                    {
                        <div class="loading-content">
                            Loading changelog...
                        </div>
                    }
                </div>
            }
            else if (activeTab == "highlights")
            {
                <div class="highlights-container">
                    <h2>Application Highlights</h2>
                    
                    <div class="highlights-grid">
                        <div class="highlight-card">
                            <div class="highlight-icon">üì∞</div>
                            <h3>RSS Feed Management</h3>
                            <p>Subscribe to your favorite websites and organize feeds by categories with customizable display options.</p>
                        </div>
                        
                        <div class="highlight-card">
                            <div class="highlight-icon">‚öôÔ∏è</div>
                            <h3>Customizable Display</h3>
                            <p>Configure items per page and auto-hide read items to personalize your reading experience.</p>
                        </div>
                        
                        <div class="highlight-card">
                            <div class="highlight-icon">üîç</div>
                            <h3>Content Search</h3>
                            <p>Quickly find articles and content across all your subscriptions.</p>
                        </div>
                        
                        <div class="highlight-card">
                            <div class="highlight-icon">‚ö°</div>
                            <h3>Real-time Updates</h3>
                            <p>Automatic background refreshing keeps your content fresh.</p>
                        </div>
                        
                        <div class="highlight-card">
                            <div class="highlight-icon">üìä</div>
                            <h3>Feed Status Dashboard</h3>
                            <p>Monitor feed health and quickly identify issues.</p>
                        </div>
                        
                        <div class="highlight-card">
                            <div class="highlight-icon">üì•</div>
                            <h3>Easy Import</h3>
                            <p>Import feeds from OPML files with improved error handling and validation.</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string activeTab = "changelog";
    private string changelogContent = "";
    private string changelogHtml = "";
    
    protected override async Task OnInitializedAsync()
    {
        await LoadChangelogContent();
    }
    
    private string GetActiveClass(string tabName)
    {
        return activeTab == tabName ? "active" : "";
    }
    
    private void SetActiveTab(string tabName)
    {
        activeTab = tabName;
        StateHasChanged();
    }
    
    private async Task LoadChangelogContent()
    {
        try
        {
            // List of possible locations for the CHANGELOG.md file
            List<string> possiblePaths = new List<string>
            {
                // Docker volume mount location
                "/app/CHANGELOG.md",
                
                // Root of the project (Docker container)
                Path.Combine(Directory.GetCurrentDirectory(), "..", "CHANGELOG.md"),
                
                // Inside the app directory (Docker container)
                Path.Combine(Directory.GetCurrentDirectory(), "CHANGELOG.md"),
                
                // Two directories up (local development)
                Path.Combine(Directory.GetCurrentDirectory(), "..", "..", "CHANGELOG.md")
            };
            
            bool foundFile = false;
            
            foreach (string path in possiblePaths)
            {
                Console.WriteLine($"Looking for changelog at: {path}");
                
                if (File.Exists(path))
                {
                    Console.WriteLine($"Found changelog at: {path}");
                    changelogContent = await File.ReadAllTextAsync(path);
                    changelogHtml = ConvertMarkdownToHtml(changelogContent);
                    foundFile = true;
                    break;
                }
            }
            
            if (!foundFile)
            {
                Console.WriteLine("Changelog file not found in any of the expected locations");
                changelogContent = "# Changelog not found";
                changelogHtml = "<h1>Changelog not found</h1><p>Could not locate the CHANGELOG.md file in any of the expected locations.</p>";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading changelog: {ex.Message}");
            changelogContent = $"Error loading changelog: {ex.Message}";
            changelogHtml = $"<p class='error'>Error loading changelog: {ex.Message}</p>";
        }
    }
    
    private string ConvertMarkdownToHtml(string markdown)
    {
        // Very simple markdown converter - for a real app you might want to use a proper library
        string html = markdown;
        
        // Convert headers
        html = Regex.Replace(html, @"^# (.*?)$", "<h1>$1</h1>", RegexOptions.Multiline);
        html = Regex.Replace(html, @"^## (.*?)$", "<h2>$1</h2>", RegexOptions.Multiline);
        html = Regex.Replace(html, @"^### (.*?)$", "<h3>$1</h3>", RegexOptions.Multiline);
        
        // Convert unordered lists
        html = Regex.Replace(html, @"^- (.*?)$", "<li>$1</li>", RegexOptions.Multiline);
        html = html.Replace("<li>", "<ul><li>").Replace("</li>\n", "</li></ul>\n");
        html = Regex.Replace(html, @"<\/ul>\s*<ul>", "", RegexOptions.Multiline);
        
        // Fix any remaining newlines to be proper HTML breaks
        html = html.Replace("\n\n", "<br><br>");
        
        return html;
    }
}
